<?php
/**
 * V1cardsSecureAuthentication
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAYCOMET REST API
 *
 * PAYCOMET API REST for customers.
 *
 * OpenAPI spec version: 2.78.0
 * Contact: tecnico@paycomet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1cardsSecureAuthentication Class Doc Comment
 *
 * @category Class
 * @description Node with user secure authentication details of a previous transaction to avoid future ACS.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1cardsSecureAuthentication implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1cards_secureAuthentication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cavv' => 'string',
'txid' => 'string',
'eci' => 'string',
'three_ds_server_trans_id' => 'string',
'authenticacion_value' => 'string',
'ds_trans_id' => 'string',
'three_ds_version' => 'string',
'authentication_flow' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cavv' => null,
'txid' => null,
'eci' => null,
'three_ds_server_trans_id' => null,
'authenticacion_value' => null,
'ds_trans_id' => null,
'three_ds_version' => null,
'authentication_flow' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cavv' => 'CAVV',
'txid' => 'TXID',
'eci' => 'ECI',
'three_ds_server_trans_id' => 'threeDSServerTransID',
'authenticacion_value' => 'authenticacionValue',
'ds_trans_id' => 'dsTransID',
'three_ds_version' => 'threeDSVersion',
'authentication_flow' => 'authenticationFlow'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cavv' => 'setCavv',
'txid' => 'setTxid',
'eci' => 'setEci',
'three_ds_server_trans_id' => 'setThreeDsServerTransId',
'authenticacion_value' => 'setAuthenticacionValue',
'ds_trans_id' => 'setDsTransId',
'three_ds_version' => 'setThreeDsVersion',
'authentication_flow' => 'setAuthenticationFlow'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cavv' => 'getCavv',
'txid' => 'getTxid',
'eci' => 'getEci',
'three_ds_server_trans_id' => 'getThreeDsServerTransId',
'authenticacion_value' => 'getAuthenticacionValue',
'ds_trans_id' => 'getDsTransId',
'three_ds_version' => 'getThreeDsVersion',
'authentication_flow' => 'getAuthenticationFlow'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cavv'] = isset($data['cavv']) ? $data['cavv'] : null;
        $this->container['txid'] = isset($data['txid']) ? $data['txid'] : null;
        $this->container['eci'] = isset($data['eci']) ? $data['eci'] : null;
        $this->container['three_ds_server_trans_id'] = isset($data['three_ds_server_trans_id']) ? $data['three_ds_server_trans_id'] : null;
        $this->container['authenticacion_value'] = isset($data['authenticacion_value']) ? $data['authenticacion_value'] : null;
        $this->container['ds_trans_id'] = isset($data['ds_trans_id']) ? $data['ds_trans_id'] : null;
        $this->container['three_ds_version'] = isset($data['three_ds_version']) ? $data['three_ds_version'] : null;
        $this->container['authentication_flow'] = isset($data['authentication_flow']) ? $data['authentication_flow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cavv
     *
     * @return string
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string $cavv CAVV value included in a 1.0.2 version ACS card emisor
     *
     * @return $this
     */
    public function setCavv($cavv)
    {
        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets txid
     *
     * @return string
     */
    public function getTxid()
    {
        return $this->container['txid'];
    }

    /**
     * Sets txid
     *
     * @param string $txid XID value included in a 1.0.2 version ACS card emisor
     *
     * @return $this
     */
    public function setTxid($txid)
    {
        $this->container['txid'] = $txid;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string $eci ECI value included in a transaction info of the ACS card emisor
     *
     * @return $this
     */
    public function setEci($eci)
    {
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets three_ds_server_trans_id
     *
     * @return string
     */
    public function getThreeDsServerTransId()
    {
        return $this->container['three_ds_server_trans_id'];
    }

    /**
     * Sets three_ds_server_trans_id
     *
     * @param string $three_ds_server_trans_id Transation unique identifier included in a transaction info of the ACS card emisor
     *
     * @return $this
     */
    public function setThreeDsServerTransId($three_ds_server_trans_id)
    {
        $this->container['three_ds_server_trans_id'] = $three_ds_server_trans_id;

        return $this;
    }

    /**
     * Gets authenticacion_value
     *
     * @return string
     */
    public function getAuthenticacionValue()
    {
        return $this->container['authenticacion_value'];
    }

    /**
     * Sets authenticacion_value
     *
     * @param string $authenticacion_value Authenticacion value included in a transaction info of the ACS card emisor
     *
     * @return $this
     */
    public function setAuthenticacionValue($authenticacion_value)
    {
        $this->container['authenticacion_value'] = $authenticacion_value;

        return $this;
    }

    /**
     * Gets ds_trans_id
     *
     * @return string
     */
    public function getDsTransId()
    {
        return $this->container['ds_trans_id'];
    }

    /**
     * Sets ds_trans_id
     *
     * @param string $ds_trans_id Unique transaction identifier assigned by the DS
     *
     * @return $this
     */
    public function setDsTransId($ds_trans_id)
    {
        $this->container['ds_trans_id'] = $ds_trans_id;

        return $this;
    }

    /**
     * Gets three_ds_version
     *
     * @return string
     */
    public function getThreeDsVersion()
    {
        return $this->container['three_ds_version'];
    }

    /**
     * Sets three_ds_version
     *
     * @param string $three_ds_version Version of the transaction of the ACS card emisor
     *
     * @return $this
     */
    public function setThreeDsVersion($three_ds_version)
    {
        $this->container['three_ds_version'] = $three_ds_version;

        return $this;
    }

    /**
     * Gets authentication_flow
     *
     * @return string
     */
    public function getAuthenticationFlow()
    {
        return $this->container['authentication_flow'];
    }

    /**
     * Sets authentication_flow
     *
     * @param string $authentication_flow Authentication field to indicate the flow (C: challenge or F: frictionless) given in the transaction
     *
     * @return $this
     */
    public function setAuthenticationFlow($authentication_flow)
    {
        $this->container['authentication_flow'] = $authentication_flow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
